// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_token.sql

package database

import (
	"context"
	"time"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (token, created_at, updated_at, expires_at, revoked_at, user_id)
VALUES ($1, now(), now(), $2, NULL, $3)
RETURNING token, created_at, updated_at, expires_at, revoked_at, user_id
`

type CreateRefreshTokenParams struct {
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
	UserID    string    `json:"user_id"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.ExpiresAt, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserID,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT user_id FROM refresh_tokens
WHERE token = $1 and revoked_at IS NULL AND expires_at > now()
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var user_id string
	err := row.Scan(&user_id)
	return user_id, err
}

const updateByRevokeToken = `-- name: UpdateByRevokeToken :exec
UPDATE refresh_tokens SET updated_at = now(), revoked_at = now()
WHERE token = $1 and revoked_at IS NULL AND expires_at > now()
`

func (q *Queries) UpdateByRevokeToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, updateByRevokeToken, token)
	return err
}
